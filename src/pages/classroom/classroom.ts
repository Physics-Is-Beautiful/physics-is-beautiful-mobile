import { Component, NgZone, Renderer2, ViewChild } from "@angular/core";
import { DomSanitizer, SafeUrl } from "@angular/platform-browser";
import { IonicPage, MenuController, Navbar, NavController, NavParams, Platform } from "ionic-angular";
import { GlobalSettingsProvider } from "../../providers/global-settings/global-settings";
import { PibAuthProvider } from "../../providers/pib-auth/pib-auth";
import { LoginPage } from "../login/login";
import { HomePage } from "../home/home";

/**
 * Generated class for the ClassroomPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: "page-classroom",
  templateUrl: "classroom.html",
})
export class ClassroomPage {

  public node: string = "/classroom/?pib_mobile=true";

  // Page URL is generated by appending the node to the global site URL.
  public pageUrl: SafeUrl;

  @ViewChild(Navbar) public navBar: Navbar;
  @ViewChild("mainObject") public mainObject: any;
  private loginPageOpened: boolean = false;
  private messageListener: () => void;
  private mainObjectElement: any;
  private navBarElement: any;

  constructor(public navCtrl: NavController, public navParams: NavParams, private sanitizer: DomSanitizer,
              private settings: GlobalSettingsProvider, private platform: Platform, private renderer: Renderer2,
              private zone: NgZone, private pibAuth: PibAuthProvider, private menuCtrl: MenuController) {

    const siteUrl = this.settings.siteUrl();
    const url = siteUrl + this.node;
    console.log(url);
    this.pageUrl = this.sanitizer.bypassSecurityTrustResourceUrl(url);

    this.platform.ready().then(() => {

      this.updateUrl("/accounts/blank");

      this.messageListener = this.renderer.listen(window, "message", (evt) => {
        this.receiveMessage(evt);
      });

      const backAction =  this.platform.registerBackButtonAction(() => {
        this.goBack();
      }, 2);
    });
  }

  public ngAfterViewInit() {
    this.mainObjectElement = this.mainObject.nativeElement;
    this.navBarElement = this.navBar.getNativeElement();
    const backAction =  this.platform.registerBackButtonAction(() => {
      this.goBack();
    }, 2);
    this.navBar.backButtonClick = () => this.toggleMenu();
  }

  private receiveMessage(evt) {
    console.log("login receive");
    console.log("receiving message: " + JSON.stringify(evt.data));
    console.log("loginPageOpened " + this.loginPageOpened);
    switch (evt.data.message) {

      case "loginInfo":
        const loggedInNow = this.pibAuth.isLoggedIn(evt.data.data);
        if (loggedInNow) {
          this.messageListener();
          this.updateUrl("/classroom/?pib_mobile=true");
        } else if (!this.loginPageOpened) {
          this.loginPageOpened = true;
          this.navCtrl.setRoot(HomePage);
          this.navCtrl.push(LoginPage, {
            continuePage: ClassroomPage,
            goBack: true,
          });
        }
        break;

        case "canGoBack":
        const canGoBack = evt.data.data;
        console.log("canGoBack " + canGoBack);
        if (canGoBack) {
          this.updateBack();
        } else {
          this.updateMenu();
        }
        break;
    }

  }

  private updateBack() {
    console.log("updateBack");
    this.navBarElement.querySelector(".back-button").style.display = "initial";
    this.navBarElement.querySelector(".bar-button-menutoggle").style.display = "none";
    this.navBar.backButtonClick = () => this.goBack();
  }

  private updateMenu() {
    console.log("updateMenu");
    this.navBarElement.querySelector(".back-button").style.display = "none";
    this.navBarElement.querySelector(".bar-button-menutoggle").style.display = "initial";
  }

  private goBack() {
    this.mainObjectElement.contentWindow.postMessage("goBack", "*");
  }

  private toggleMenu() {
    this.menuCtrl.toggle();
  }

  private updateUrl(url: string) {
    this.pageUrl = this.sanitizer.bypassSecurityTrustResourceUrl(this.settings.siteUrl() + url);
    this.zone.run(() => {});
  }
}
